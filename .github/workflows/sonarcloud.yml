# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow helps you trigger a SonarCloud analysis of your code and populates
# GitHub Code Scanning alerts with the vulnerabilities found.
# Free for open source project.

# 1. Login to SonarCloud.io using your GitHub account

# 2. Import your project on SonarCloud
#     * Add your GitHub organization first, then add your repository as a new project.
#     * Please note that many languages are eligible for automatic analysis,
#       which means that the analysis will start automatically without the need to set up GitHub Actions.
#     * This behavior can be changed in Administration > Analysis Method.
#
# 3. Follow the SonarCloud in-product tutorial
#     * a. Copy/paste the Project Key and the Organization Key into the args parameter below
#          (You'll find this information in SonarCloud. Click on "Information" at the bottom left)
#
#     * b. Generate a new token and add it to your Github repository's secrets using the name SONAR_TOKEN
#          (On SonarCloud, click on your avatar on top-right > My account > Security
#           or go directly to https://sonarcloud.io/account/security/)

# Feel free to take a look at our documentation (https://docs.sonarcloud.io/getting-started/github/)
# or reach out to our community forum if you need some help (https://community.sonarsource.com/c/help/sc/9)

name: SonarCloud analysis

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch:

permissions:
  pull-requests: read # allows SonarCloud to decorate PRs with analysis results

jobs:
  Analysis:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install
        working-directory: ./Backend

      - name: Set up test environment
        run: |
          echo "DATABASE_URL=\"file:./test.db\"" > .env.test
          echo "JWT_SECRET=\"test-secret-for-ci\"" >> .env.test
          echo "NODE_ENV=test" >> .env.test
        working-directory: ./Backend

      - name: Generate Prisma client
        run: npx prisma generate
        working-directory: ./Backend

      - name: Set up test database
        run: |
          # Use the pre-built SQLite schema
          npx prisma generate --schema=./prisma/schema.sqlite.prisma
          npx prisma db push --force-reset --schema=./prisma/schema.sqlite.prisma
        working-directory: ./Backend
        env:
          DATABASE_URL: "file:./test.db"

      - name: Run tests
        run: npm run test:ci
        working-directory: ./Backend
        env:
          DATABASE_URL: "file:./test.db"
          JWT_SECRET: "test-secret-for-ci"
          NODE_ENV: test
      - name: Analyze with SonarCloud

        # You can pin the exact commit or the version.
        # uses: SonarSource/sonarcloud-github-action@v2.2.0
        uses: SonarSource/sonarcloud-github-action@4006f663ecaf1f8093e8e4abb9227f6041f52216
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        with:
          # Additi0onal arguments for the SonarScanner CLI
          args:
            # Unique keys of your project and organization. You can find them in SonarCloud > Information (bottom-left menu)
            # mandatory
            -Dsonar.projectKey=rojoprogramador_punto_y_coma
            -Dsonar.organization=rojoprogramador
            -Dsonar.sources=Backend/src
            -Dsonar.tests=Backend/src/__tests__
            -Dsonar.exclusions=**/node_modules/**,**/coverage/**,**/*.test.js,**/*.spec.js,**/jest.config.js,**/jest.setup.js,**/test.db,**/schema.sqlite.prisma
            -Dsonar.test.exclusions=Backend/src/__tests__/**
            -Dsonar.coverage.exclusions=Backend/src/__tests__/**,Backend/src/app.js,**/jest.config.js,**/jest.setup.js
            -Dsonar.javascript.lcov.reportPaths=Backend/coverage/lcov.info
            # Adds more detail to both client and server-side analysis logs, activating DEBUG mode for the scanner, and adding client-side environment variables and system properties to the server-side log of analysis report processing.
            #-Dsonar.verbose= # optional, default is false
          # When you need the analysis to take place in a directory other than the one from which it was launched, default is .
          projectBaseDir: .
